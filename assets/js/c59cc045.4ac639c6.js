"use strict";(self.webpackChunkwiki=self.webpackChunkwiki||[]).push([[2955],{4863:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>n,metadata:()=>a,toc:()=>l});var s=r(4848),t=r(8453);const n={id:"overview",title:"COMP 2540 - Overview",sidebar_label:"COMP-2540",slug:"/comp-2540/overview"},o=void 0,a={id:"comp-2540/overview",title:"COMP 2540 - Overview",description:"Course Title",source:"@site/courses/comp-2540/overview.md",sourceDirName:"comp-2540",slug:"/comp-2540/overview",permalink:"/wiki/courses/comp-2540/overview",draft:!1,unlisted:!1,editUrl:"https://github.com/UWindsorCSS/Wiki/tree/master/courses/comp-2540/overview.md",tags:[],version:"current",frontMatter:{id:"overview",title:"COMP 2540 - Overview",sidebar_label:"COMP-2540",slug:"/comp-2540/overview"},sidebar:"indexNav",previous:{title:"Surviving COMP-2310",permalink:"/wiki/courses/comp-2310/surviving-comp-2310"},next:{title:"COMP-2547",permalink:"/wiki/courses/comp-2547/overview"}},c={},l=[{value:"Course Title",id:"course-title",level:2},{value:"Course Description",id:"course-description",level:2},{value:"Typical Course Offering",id:"typical-course-offering",level:2},{value:"Is a Textbook Required?",id:"is-a-textbook-required",level:2},{value:"Prerequisites",id:"prerequisites",level:2}];function u(e){const i={h2:"h2",p:"p",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h2,{id:"course-title",children:"Course Title"}),"\n",(0,s.jsx)(i.p,{children:'The title for COMP-2540 is "Data Structures and Algorithms".'}),"\n",(0,s.jsx)(i.h2,{id:"course-description",children:"Course Description"}),"\n",(0,s.jsx)(i.p,{children:"An introduction to the programming and analysis of linear and non-linear internal (main store) data structures and associated algorithms . Topics include the formal notion of an algorithm, elementary time and space complexity; linear lists (such as stacks, queues, linked structures.); non-linear lists (trees, binary trees); recursion; sorting techniques (such as heap sort, quick sort, merge sort, shell sort.); searching techniques (such as binary search, binary search trees, red-black trees, hashing.); algorithm design paradigms (such as divide-and-conquer, dynamic programming, greedy algorithms); and applications. (Prerequisite: COMP-1000 and COMP-1410.) (3 lecture hours and 1.5 laboratory hours a week.)"}),"\n",(0,s.jsx)(i.h2,{id:"typical-course-offering",children:"Typical Course Offering"}),"\n",(0,s.jsx)(i.p,{children:"COMP-2540 is typically offered in all semesters."}),"\n",(0,s.jsx)(i.h2,{id:"is-a-textbook-required",children:"Is a Textbook Required?"}),"\n",(0,s.jsx)(i.p,{children:"No, while there is a textbook listed and you may find it helpful, it is not required to succeed in this course."}),"\n",(0,s.jsx)(i.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsx)(i.p,{children:"COMP-1000 and COMP-1410 are the prerequisites for this class."})]})}function d(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,i,r)=>{r.d(i,{R:()=>o,x:()=>a});var s=r(6540);const t={},n=s.createContext(t);function o(e){const i=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(n.Provider,{value:i},e.children)}}}]);